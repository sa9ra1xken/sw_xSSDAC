/*
 * fir_interpolator.xc
 *
 *  Created on: 2019/08/17
 *      Author: takaaki
 */

#include <XS1.h>
#include <stdio.h>
#include "ssdac.h"
//#include "gpio_access.h"
#include "audiohw.h"
#include "ring_buffer.h"
#include "fir_interpolator.h"

#include "sinc8.h"
#include "customdefines.h"
#include "do_sample_transfer.h"

#define INTERPOLATION_FACTOR 8
//#define FIR_LEN 48
//#define FIR_LEN 40
#define FIR_LEN 34

#define NUM_THREAD 4
//#define NUM_THREAD 6
#define TAP_PER_THREAD (FIR_LEN / NUM_THREAD)
#define START ( - FIR_LEN  / 2 )

extern unsigned ring_buff_mask;
extern ring_buff_l[];
extern ring_buff_r[];
extern int current;

extern port     tp23_solver;
extern port     tp24_interpolator;

/**********************************************************
* fir_sinc8
**********************************************************/
{DAC_RETURN_CODE, unsigned} fir_sinc8(chanend c_in, streaming chanend c_out, chanend ?c_control, unsigned sample_rate)
{
    //unsigned sample_rate;
    //int left, right;
    int acc_l_msb[NUM_THREAD];
    unsigned acc_l_lsb[NUM_THREAD];
    int acc_r_msb[NUM_THREAD];
    unsigned acc_r_lsb[NUM_THREAD];

    unsigned underflowWord = 0;

    printf("\nfir_sinc8 started, sps:%d", sample_rate);
    fflush(stdout);

    // release muting relay
    ReleaseMute();

    while (1){

        tp23_solver <: 1;
        if (!isnull(c_control)){
            INTERPOLATION_MODE mode;
            c_control <: _GET_INTERPOLATION_MODE;
            c_control :> mode;
            if ( mode != _SINC8 ){
                soutct(c_out, XS1_CT_END);  //kill serial dac driver thread
                return {_INTERPOLATION_MODE_CHANGE, 0};
            }
        }
        tp23_solver <: 0;

        unsigned command = DoSampleTransfer(c_in, underflowWord);
        if (command){
            soutct(c_out, XS1_CT_END);  //kill serial dac driver thread
            return {_AUDIO_FORMAT_CHANGE, command};
        }
        add_sample(samplesOut[0] >> 4,samplesOut[1] >> 4);

        #pragma unsafe arrays
        #pragma loop unroll
        for (unsigned m = 0 ; m < INTERPOLATION_FACTOR ; m++ ){

            par (int i = 0 ; i < NUM_THREAD ; i++ )
            {
                {
                    acc_l_msb[i] = 0; acc_l_lsb[i] = 0;
                    acc_r_msb[i] = 0; acc_r_lsb[i] = 0;
                    #pragma unsafe arrays
                    #pragma loop unroll

                    for (
                        int n = START + i * TAP_PER_THREAD;
                        n < START + (i + 1) * TAP_PER_THREAD;
                        n++
                    )
                    {

                        {acc_l_msb[i], acc_l_lsb[i]} = macs(
                                ring_buff_l[( current + n) & ring_buff_mask],
                                fir_tap_sinc8_q30[-n + OFFSET - 1][m],
                                acc_l_msb[i], acc_l_lsb[i]);

                        {acc_r_msb[i], acc_r_lsb[i]} = macs(
                                ring_buff_r[( current + n) & ring_buff_mask],
                                fir_tap_sinc8_q30[-n + OFFSET - 1][m],
                                acc_r_msb[i], acc_r_lsb[i]);
                    }
                }
            }

            int out_l = 0;
            int out_r = 0;

            for (int i = 0 ; i < NUM_THREAD ; i++){
                out_l += acc_l_msb[i];
                out_r += acc_r_msb[i];
            }
            c_out <: ( out_l << 3);
            c_out <: ( out_r << 3);
        }
    }
}
